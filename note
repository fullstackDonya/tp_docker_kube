### Récapitulatif des services

| Type     | Service    | Technologie | Description                        | Port |
|----------|------------|-------------|------------------------------------|------|
| Frontend | Client     | React       | Interface utilisateur              | 3000 |
| Backend  | Posts      | Node.js     | Gestion des posts                  | 4000 |
| Backend  | Comments   | Node.js     | Gestion des commentaires           | 4001 |
| Backend  | Query      | Node.js     | Gestion des requêtes agrégées      | 4002 |
| Backend  | Moderation | Node.js     | Modération des commentaires        | 4003 |
| Backend  | Event Bus  | Node.js     | Gestion des événements entre les microservices | 4005 |

### Étapes d'installation:
1. **Installer les dépendances pour chaque service** :
   - Naviguer dans le répertoire de chaque service et installer les dépendances avec `npm install`.
   cd microservices
   cd client && npm install
   cd ../posts && npm install
   cd ../comments && npm install
   cd ../query && npm install
   cd ../moderation && npm install
   cd ../event-bus && npm install

2. **Créer les fichiers Dockerfile et docker-compose.yml** :
   - Créer un fichier Dockerfile dans chaque répertoire de service pour définir comment construire l'image Docker.

   - Créer un fichier docker-compose.yml

 pour orchestrer les services Docker.

3. **Créer les fichiers d'authentification** :
   - Créer un répertoire auth
   mkdir auth

 et ajouter des utilisateurs avec `htpasswd`.
   htpasswd -Bc ./auth/htpasswd admin
   htpasswd -Bc ./auth/htpasswd admin2

4. **Mettre à jour le secret Docker dans Kubernetes** :
   - Supprimer le secret existant et créer un nouveau secret pour l'authentification Docker.
   kubectl delete secret regcred
   kubectl create secret docker-registry regcred \
     --docker-server=localhost:5001 \
     --docker-username=admin \
     --docker-password=password \
     --docker-email=your-email@example.com


### Déploiement avec Docker
1. **Construire les images Docker pour chaque service** :
   - Utiliser `docker build` pour créer des images Docker pour chaque service.
   docker build -t localhost:5001/micro_service/client ./client
   docker build -t localhost:5001/micro_service/posts ./posts
   docker build -t localhost:5001/micro_service/comments ./comments
   docker build -t localhost:5001/micro_service/query ./query
   docker build -t localhost:5001/micro_service/moderation ./moderation
   docker build -t localhost:5001/micro_service/event-bus ./event-bus

2. **Authentification Docker** :
   - Connecter-vous à Docker avec `docker login`.
   docker login

3. **Taguer les images pour le registre local** :
   - Utiliser `docker tag` pour taguer les images Docker pour le registre local.
   docker tag micro_service/client /micro_service/client
   docker tag micro_service/posts /micro_service/posts
   docker tag micro_service/comments /micro_service/comments
   docker tag micro_service/query /micro_service/query
   docker tag micro_service/moderation /micro_service/moderation
   docker tag micro_service/event-bus /micro_service/event-bus

4. **Pousser les images dans le registre local** :
   - Utiliser `docker push` pour pousser les images Docker dans le registre local.
   docker push localhost:5001/micro_service/client
   docker push localhost:5001/micro_service/posts
   docker push localhost:5001/micro_service/comments
   docker push localhost:5001/micro_service/query
   docker push localhost:5001/micro_service/moderation
   docker push localhost:5001/micro_service/event-bus

5. **Démarrer un registre Docker local** :
   - Utiliser `docker run` pour démarrer un registre Docker local.
   docker run -d -p 5001:5000 --name registry registry:2

6. **Démarrer les services avec Docker Compose** :
   - Utiliser `docker-compose up` pour démarrer les services définis dans le fichier docker-compose.yml.
   docker-compose up --build -d


### Vérification de l'état des services
1. **Vérifier l'état des services Docker Compose** :
   - Utiliser `docker-compose logs` pour vérifier les logs de chaque service.
   docker-compose logs client
   docker-compose logs posts
   docker-compose logs comments
   docker-compose logs query
   docker-compose logs moderation
   docker-compose logs event-bus


### Déploiement avec Kubernetes
1. **Créer les fichiers de configuration Kubernetes** :
   - Créer les fichiers de configuration pour chaque service dans le répertoire 

k8s

.
   creer k8s/client-srv-deployment.yaml
   creer k8s/client-srv-service.yaml
   creer k8s/comments-srv-deployment.yaml
   creer k8s/comments-srv-service.yaml
   creer k8s/event-bus-srv-deployment.yaml
   creer k8s/event-bus-srv-service.yaml
   creer k8s/moderation-srv-deployment.yaml
   creer k8s/moderation-srv-service.yaml
   creer k8s/posts-clusterip-srv-deployment.yaml
   creer k8s/posts-clusterip-srv-service.yaml
   creer k8s/query-srv-deployment.yaml
   creer k8s/query-srv-service.yaml

2. **Appliquer les fichiers de configuration Kubernetes** :
   - Utiliser `kubectl apply` pour appliquer les fichiers de configuration Kubernetes.
   kubectl apply -f k8s/
   kubectl apply -f k8s/client-srv-service.yml
   kubectl apply -f k8s/comments-srv-deployment.yaml
   kubectl apply -f k8s/comments-srv-service.yaml
   kubectl apply -f k8s/event-bus-srv-deployment.yaml
   kubectl apply -f k8s/event-bus-srv-service.yaml
   kubectl apply -f k8s/ingress.yaml
   kubectl apply -f k8s/moderation-srv-deployment.yaml
   kubectl apply -f k8s/moderation-srv-service.yaml
   kubectl apply -f k8s/posts-clusterip-srv-deployment.yaml
   kubectl apply -f k8s/posts-clusterip-srv-service.yaml
   kubectl apply -f k8s/query-srv-deployment.yaml
   kubectl apply -f k8s/query-srv-service.yaml

3. **Vérifier l'état des services Kubernetes** :
   - Utiliser `kubectl get` pour vérifier l'état des nœuds, des pods et des services.
   kubectl get nodes
   kubectl get pods
   kubectl get svc

4. **Vérifier les logs des pods Kubernetes** :
   - Utiliser `kubectl logs` pour vérifier les logs des pods.
   kubectl logs client-srv-55bf8857b-8xk85
   kubectl logs posts-srv-7d58f5d6f7-jlmmb
   kubectl logs comments-srv-7d58f5d6f7-jlmmb
   kubectl logs query-srv-7d58f5d6f7-jlmmb
   kubectl logs moderation-srv-7d58f5d6f7-jlmmb

### Accéder aux services

1. **URL des services accessibles** :
   - Client : http://localhost:3000
   - Comments : http://localhost:4001
   - Event Bus : http://localhost:4005
   - Moderation : http://localhost:4003
   - Posts : http://localhost:4000
   - Query : http://localhost:4002
   - Registry : http://localhost:5005

2. **Accéder à l'application front-end** :
   - Accéder à http://localhost:3000 pour voir l'interface utilisateur.

3. **Vérifier les autres services via leur API** :
   - http://localhost/posts/create
   - http://localhost/posts
   - http://localhost/posts/<id>/comments
   - http://localhost

4. **Accéder à l'application front-end (Kubernetes)** :
   - Si déployé sur Kubernetes, accéder à l'application front-end via l'URL suivante :
     http://192.168.49.2:31637
   - Ou pour les services spécifiques :
     http://192.168.49.2:31637/posts

### Commandes supplémentaires

1. **Supprimer un container** :
   - Utiliser `docker stop` pour arrêter un container.
   docker stop <container_id>

2. **Supprimer un pod Kubernetes** :
   - Utiliser `kubectl delete pod` pour supprimer un pod.
   kubectl delete pod client-srv-c586d6fd7-jq9px

3. **Décrire un pod Kubernetes** :
   - Utiliser `kubectl describe pod` pour obtenir des informations détaillées sur un pod.
   kubectl describe pod moderation-srv-bb6c96478-99gvv

4. **Vérifier les logs d'un pod Kubernetes** :
   - Utiliser `kubectl logs` pour vérifier les logs d'un pod.
   kubectl logs client-srv-76445cf66d-br826